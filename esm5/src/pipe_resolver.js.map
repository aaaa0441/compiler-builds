{"version":3,"file":"pipe_resolver.js","sourceRoot":"","sources":["../../../../../packages/compiler/src/pipe_resolver.ts"],"names":[],"mappings":";;;;;;;;;;;AASA,OAAO,EAAa,UAAU,EAAC,MAAM,QAAQ,CAAC;AAC9C,OAAO,EAAC,QAAQ,EAAC,MAAM,sBAAsB,CAAC;AAC9C,OAAO,EAAC,iBAAiB,EAAE,SAAS,EAAC,MAAM,QAAQ,CAAC;;;;;;;;AASpD;;;;;;;AAAA;IACE,sBAAoB,UAA4B;QAA5B,eAAU,GAAV,UAAU,CAAkB;KAAI;;;;;IAEpD,6BAAM;;;;IAAN,UAAO,IAAU;QACf,qBAAM,YAAY,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC,CAAC;QAC1E,MAAM,CAAC,YAAY,IAAI,YAAY,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;KAC/D;IAED;;OAEG;;;;;;;IACH,8BAAO;;;;;;IAAP,UAAQ,IAAU,EAAE,eAAsB;QAAtB,gCAAA,EAAA,sBAAsB;QACxC,qBAAM,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC,CAAC;QACnE,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;YACV,qBAAM,UAAU,GAAG,QAAQ,CAAC,KAAK,EAAE,UAAU,CAAC,QAAQ,CAAC,CAAC;YACxD,EAAE,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;gBACf,MAAM,CAAC,UAAU,CAAC;aACnB;SACF;QACD,EAAE,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC;YACpB,MAAM,IAAI,KAAK,CAAC,gCAA8B,SAAS,CAAC,IAAI,CAAG,CAAC,CAAC;SAClE;QACD,MAAM,CAAC,IAAI,CAAC;KACb;uBA3CH;IA4CC,CAAA;;;;;;;;AAxBD,wBAwBC","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CompileReflector} from './compile_reflector';\nimport {Pipe, Type, createPipe} from './core';\nimport {findLast} from './directive_resolver';\nimport {resolveForwardRef, stringify} from './util';\n\n/**\n * Resolve a `Type` for {@link Pipe}.\n *\n * This interface can be overridden by the application developer to create custom behavior.\n *\n * See {@link Compiler}\n */\nexport class PipeResolver {\n  constructor(private _reflector: CompileReflector) {}\n\n  isPipe(type: Type) {\n    const typeMetadata = this._reflector.annotations(resolveForwardRef(type));\n    return typeMetadata && typeMetadata.some(createPipe.isTypeOf);\n  }\n\n  /**\n   * Return {@link Pipe} for a given `Type`.\n   */\n  resolve(type: Type, throwIfNotFound = true): Pipe|null {\n    const metas = this._reflector.annotations(resolveForwardRef(type));\n    if (metas) {\n      const annotation = findLast(metas, createPipe.isTypeOf);\n      if (annotation) {\n        return annotation;\n      }\n    }\n    if (throwIfNotFound) {\n      throw new Error(`No Pipe decorator found on ${stringify(type)}`);\n    }\n    return null;\n  }\n}\n"]}