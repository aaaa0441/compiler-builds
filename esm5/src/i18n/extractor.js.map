{"version":3,"file":"extractor.js","sourceRoot":"","sources":["../../../../../../packages/compiler/src/i18n/extractor.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\n/**\n * Extract i18n messages from source code\n */\nimport {analyzeAndValidateNgModules} from '../aot/compiler';\nimport {createAotUrlResolver} from '../aot/compiler_factory';\nimport {StaticReflector} from '../aot/static_reflector';\nimport {StaticSymbolCache} from '../aot/static_symbol';\nimport {StaticSymbolResolver, StaticSymbolResolverHost} from '../aot/static_symbol_resolver';\nimport {AotSummaryResolver, AotSummaryResolverHost} from '../aot/summary_resolver';\nimport {CompileDirectiveMetadata} from '../compile_metadata';\nimport {CompilerConfig} from '../config';\nimport {ViewEncapsulation} from '../core';\nimport {DirectiveNormalizer} from '../directive_normalizer';\nimport {DirectiveResolver} from '../directive_resolver';\nimport {CompileMetadataResolver} from '../metadata_resolver';\nimport {HtmlParser} from '../ml_parser/html_parser';\nimport {InterpolationConfig} from '../ml_parser/interpolation_config';\nimport {NgModuleResolver} from '../ng_module_resolver';\nimport {ParseError} from '../parse_util';\nimport {PipeResolver} from '../pipe_resolver';\nimport {DomElementSchemaRegistry} from '../schema/dom_element_schema_registry';\nimport {syntaxError} from '../util';\n\nimport {MessageBundle} from './message_bundle';\n\n\n\n/**\n * The host of the Extractor disconnects the implementation from TypeScript / other language\n * services and from underlying file systems.\n */\nexport interface ExtractorHost extends StaticSymbolResolverHost, AotSummaryResolverHost {\n  /**\n   * Converts a path that refers to a resource into an absolute filePath\n   * that can be lateron used for loading the resource via `loadResource.\n   */\n  resourceNameToFileName(path: string, containingFile: string): string|null;\n  /**\n   * Loads a resource (e.g. html / css)\n   */\n  loadResource(path: string): Promise<string>|string;\n}\n\nexport class Extractor {\n  constructor(\n      public host: ExtractorHost, private staticSymbolResolver: StaticSymbolResolver,\n      private messageBundle: MessageBundle, private metadataResolver: CompileMetadataResolver) {}\n\n  extract(rootFiles: string[]): Promise<MessageBundle> {\n    const {files, ngModules} = analyzeAndValidateNgModules(\n        rootFiles, this.host, this.staticSymbolResolver, this.metadataResolver);\n    return Promise\n        .all(ngModules.map(\n            ngModule => this.metadataResolver.loadNgModuleDirectiveAndPipeMetadata(\n                ngModule.type.reference, false)))\n        .then(() => {\n          const errors: ParseError[] = [];\n\n          files.forEach(file => {\n            const compMetas: CompileDirectiveMetadata[] = [];\n            file.directives.forEach(directiveType => {\n              const dirMeta = this.metadataResolver.getDirectiveMetadata(directiveType);\n              if (dirMeta && dirMeta.isComponent) {\n                compMetas.push(dirMeta);\n              }\n            });\n            compMetas.forEach(compMeta => {\n              const html = compMeta.template !.template !;\n              const interpolationConfig =\n                  InterpolationConfig.fromArray(compMeta.template !.interpolation);\n              errors.push(...this.messageBundle.updateFromTemplate(\n                  html, file.fileName, interpolationConfig) !);\n            });\n          });\n\n          if (errors.length) {\n            throw new Error(errors.map(e => e.toString()).join('\\n'));\n          }\n\n          return this.messageBundle;\n        });\n  }\n\n  static create(host: ExtractorHost, locale: string|null):\n      {extractor: Extractor, staticReflector: StaticReflector} {\n    const htmlParser = new HtmlParser();\n\n    const urlResolver = createAotUrlResolver(host);\n    const symbolCache = new StaticSymbolCache();\n    const summaryResolver = new AotSummaryResolver(host, symbolCache);\n    const staticSymbolResolver = new StaticSymbolResolver(host, symbolCache, summaryResolver);\n    const staticReflector = new StaticReflector(summaryResolver, staticSymbolResolver);\n\n    const config =\n        new CompilerConfig({defaultEncapsulation: ViewEncapsulation.Emulated, useJit: false});\n\n    const normalizer = new DirectiveNormalizer(\n        {get: (url: string) => host.loadResource(url)}, urlResolver, htmlParser, config);\n    const elementSchemaRegistry = new DomElementSchemaRegistry();\n    const resolver = new CompileMetadataResolver(\n        config, htmlParser, new NgModuleResolver(staticReflector),\n        new DirectiveResolver(staticReflector), new PipeResolver(staticReflector), summaryResolver,\n        elementSchemaRegistry, normalizer, console, symbolCache, staticReflector);\n\n    // TODO(vicb): implicit tags & attributes\n    const messageBundle = new MessageBundle(htmlParser, [], {}, locale);\n\n    const extractor = new Extractor(host, staticSymbolResolver, messageBundle, resolver);\n    return {extractor, staticReflector};\n  }\n}\n"]}