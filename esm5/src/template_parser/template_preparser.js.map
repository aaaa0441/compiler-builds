{"version":3,"file":"template_preparser.js","sourceRoot":"","sources":["../../../../../../packages/compiler/src/template_parser/template_preparser.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport * as html from '../ml_parser/ast';\nimport {isNgContent} from '../ml_parser/tags';\n\nconst NG_CONTENT_SELECT_ATTR = 'select';\nconst LINK_ELEMENT = 'link';\nconst LINK_STYLE_REL_ATTR = 'rel';\nconst LINK_STYLE_HREF_ATTR = 'href';\nconst LINK_STYLE_REL_VALUE = 'stylesheet';\nconst STYLE_ELEMENT = 'style';\nconst SCRIPT_ELEMENT = 'script';\nconst NG_NON_BINDABLE_ATTR = 'ngNonBindable';\nconst NG_PROJECT_AS = 'ngProjectAs';\n\nexport function preparseElement(ast: html.Element): PreparsedElement {\n  let selectAttr: string = null !;\n  let hrefAttr: string = null !;\n  let relAttr: string = null !;\n  let nonBindable = false;\n  let projectAs = '';\n  ast.attrs.forEach(attr => {\n    const lcAttrName = attr.name.toLowerCase();\n    if (lcAttrName == NG_CONTENT_SELECT_ATTR) {\n      selectAttr = attr.value;\n    } else if (lcAttrName == LINK_STYLE_HREF_ATTR) {\n      hrefAttr = attr.value;\n    } else if (lcAttrName == LINK_STYLE_REL_ATTR) {\n      relAttr = attr.value;\n    } else if (attr.name == NG_NON_BINDABLE_ATTR) {\n      nonBindable = true;\n    } else if (attr.name == NG_PROJECT_AS) {\n      if (attr.value.length > 0) {\n        projectAs = attr.value;\n      }\n    }\n  });\n  selectAttr = normalizeNgContentSelect(selectAttr);\n  const nodeName = ast.name.toLowerCase();\n  let type = PreparsedElementType.OTHER;\n  if (isNgContent(nodeName)) {\n    type = PreparsedElementType.NG_CONTENT;\n  } else if (nodeName == STYLE_ELEMENT) {\n    type = PreparsedElementType.STYLE;\n  } else if (nodeName == SCRIPT_ELEMENT) {\n    type = PreparsedElementType.SCRIPT;\n  } else if (nodeName == LINK_ELEMENT && relAttr == LINK_STYLE_REL_VALUE) {\n    type = PreparsedElementType.STYLESHEET;\n  }\n  return new PreparsedElement(type, selectAttr, hrefAttr, nonBindable, projectAs);\n}\n\nexport enum PreparsedElementType {\n  NG_CONTENT,\n  STYLE,\n  STYLESHEET,\n  SCRIPT,\n  OTHER\n}\n\nexport class PreparsedElement {\n  constructor(\n      public type: PreparsedElementType, public selectAttr: string, public hrefAttr: string,\n      public nonBindable: boolean, public projectAs: string) {}\n}\n\n\nfunction normalizeNgContentSelect(selectAttr: string): string {\n  if (selectAttr === null || selectAttr.length === 0) {\n    return '*';\n  }\n  return selectAttr;\n}\n"]}