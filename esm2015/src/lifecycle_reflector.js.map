{"version":3,"file":"lifecycle_reflector.js","sourceRoot":"","sources":["../../../../packages/compiler/src/lifecycle_reflector.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqBA,MAAM,CAAC,uBAAM,sBAAsB,GAAG;IACpC,cAAc,CAAC,MAAM,EAAE,cAAc,CAAC,SAAS,EAAE,cAAc,CAAC,OAAO,EAAE,cAAc,CAAC,SAAS;IACjG,cAAc,CAAC,gBAAgB,EAAE,cAAc,CAAC,mBAAmB,EAAE,cAAc,CAAC,aAAa;IACjG,cAAc,CAAC,gBAAgB;CAChC,CAAC;;;;;;;AAEF,MAAM,2BACF,SAA2B,EAAE,IAAoB,EAAE,KAAU;IAC/D,MAAM,CAAC,SAAS,CAAC,gBAAgB,CAAC,KAAK,EAAE,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC;CAC7D;;;;;;AAED,MAAM,+BAA+B,SAA2B,EAAE,KAAU;IAC1E,MAAM,CAAC,sBAAsB,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,gBAAgB,CAAC,SAAS,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC,CAAC;CACxF;;;;;AAED,qBAAqB,IAAoB;IACvC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;QACb,KAAK,cAAc,CAAC,MAAM;YACxB,MAAM,CAAC,UAAU,CAAC;QACpB,KAAK,cAAc,CAAC,SAAS;YAC3B,MAAM,CAAC,aAAa,CAAC;QACvB,KAAK,cAAc,CAAC,OAAO;YACzB,MAAM,CAAC,WAAW,CAAC;QACrB,KAAK,cAAc,CAAC,SAAS;YAC3B,MAAM,CAAC,aAAa,CAAC;QACvB,KAAK,cAAc,CAAC,gBAAgB;YAClC,MAAM,CAAC,oBAAoB,CAAC;QAC9B,KAAK,cAAc,CAAC,mBAAmB;YACrC,MAAM,CAAC,uBAAuB,CAAC;QACjC,KAAK,cAAc,CAAC,aAAa;YAC/B,MAAM,CAAC,iBAAiB,CAAC;QAC3B,KAAK,cAAc,CAAC,gBAAgB;YAClC,MAAM,CAAC,oBAAoB,CAAC;KAC/B;CACF","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CompileReflector} from './compile_reflector';\n\nexport enum LifecycleHooks {\n  OnInit,\n  OnDestroy,\n  DoCheck,\n  OnChanges,\n  AfterContentInit,\n  AfterContentChecked,\n  AfterViewInit,\n  AfterViewChecked\n}\n\nexport const LIFECYCLE_HOOKS_VALUES = [\n  LifecycleHooks.OnInit, LifecycleHooks.OnDestroy, LifecycleHooks.DoCheck, LifecycleHooks.OnChanges,\n  LifecycleHooks.AfterContentInit, LifecycleHooks.AfterContentChecked, LifecycleHooks.AfterViewInit,\n  LifecycleHooks.AfterViewChecked\n];\n\nexport function hasLifecycleHook(\n    reflector: CompileReflector, hook: LifecycleHooks, token: any): boolean {\n  return reflector.hasLifecycleHook(token, getHookName(hook));\n}\n\nexport function getAllLifecycleHooks(reflector: CompileReflector, token: any): LifecycleHooks[] {\n  return LIFECYCLE_HOOKS_VALUES.filter(hook => hasLifecycleHook(reflector, hook, token));\n}\n\nfunction getHookName(hook: LifecycleHooks): string {\n  switch (hook) {\n    case LifecycleHooks.OnInit:\n      return 'ngOnInit';\n    case LifecycleHooks.OnDestroy:\n      return 'ngOnDestroy';\n    case LifecycleHooks.DoCheck:\n      return 'ngDoCheck';\n    case LifecycleHooks.OnChanges:\n      return 'ngOnChanges';\n    case LifecycleHooks.AfterContentInit:\n      return 'ngAfterContentInit';\n    case LifecycleHooks.AfterContentChecked:\n      return 'ngAfterContentChecked';\n    case LifecycleHooks.AfterViewInit:\n      return 'ngAfterViewInit';\n    case LifecycleHooks.AfterViewChecked:\n      return 'ngAfterViewChecked';\n  }\n}\n"]}